// DAX Query
DEFINE
	VAR __DS0Core = 
		SUMMARIZECOLUMNS(
			'States'[State],
			ROLLUPADDISSUBTOTAL('States'[Census Region], "IsGrandTotalColumnTotal"),
			"States", '_Measures'[States]
		)

	VAR __DS0CoreOnlyOutputTotals = 
		SELECTCOLUMNS(
			KEEPFILTERS(FILTER(KEEPFILTERS(__DS0Core), [IsGrandTotalColumnTotal] = FALSE)),
			"'States'[State]", 'States'[State],
			"'States'[Census Region]", 'States'[Census Region],
			"States", [States]
		)

	VAR __DS0PrimaryBase = 
		SUMMARIZE(__DS0Core, 'States'[State])

	VAR __DS0CoreTableByDM0 = 
		SELECTCOLUMNS(
			KEEPFILTERS(FILTER(KEEPFILTERS(__DS0Core), [IsGrandTotalColumnTotal] = TRUE)),
			"'States'[State]", 'States'[State],
			"SortBy_DM0_0", [States]
		)

	VAR __DS0PrimaryWithSortColumns = 
		NATURALLEFTOUTERJOIN(
			__DS0PrimaryBase,
			__DS0CoreTableByDM0
		)

	VAR __DS0SecondaryBase = 
		SUMMARIZE(__DS0CoreOnlyOutputTotals, 'States'[Census Region])

	VAR __DS0IntersectionCount = CALCULATE(COUNTROWS(__DS0CoreOnlyOutputTotals))

	VAR __DS0PrimaryCount = CALCULATE(COUNTROWS(__DS0PrimaryWithSortColumns))

	VAR __DS0SecondaryCount = CALCULATE(COUNTROWS(__DS0SecondaryBase))

	VAR __DS0SpaceCount = (__DS0PrimaryCount * __DS0SecondaryCount)

	VAR __DS0SparseFactor = MIN(5, DIVIDE(__DS0SpaceCount, __DS0IntersectionCount))

	VAR __DS0TargetIntersectionCount = CEILING(3500 * __DS0SparseFactor, 1)

	VAR __DS0InitTargetPrimaryCount = 
		IF(
			__DS0IntersectionCount <= 3500,
			IF(
				__DS0SpaceCount <= __DS0TargetIntersectionCount,
				3500,
				FLOOR(
					SQRT(__DS0TargetIntersectionCount * DIVIDE(__DS0PrimaryCount, __DS0SecondaryCount)),
					1
				)
			),
			IF(
				AND(__DS0PrimaryCount > 800, __DS0SecondaryCount > 60),
				CEILING(DIVIDE(__DS0TargetIntersectionCount, 60), 1),
				IF(
					__DS0SecondaryCount > 60,
					__DS0PrimaryCount,
					CEILING(DIVIDE(__DS0TargetIntersectionCount, __DS0SecondaryCount), 1)
				)
			)
		)

	VAR __DS0InitTargetSecondaryCount = 
		IF(
			__DS0IntersectionCount <= 3500,
			IF(
				__DS0SpaceCount <= __DS0TargetIntersectionCount,
				3500,
				FLOOR(
					DIVIDE(__DS0TargetIntersectionCount, FLOOR(
						SQRT(__DS0TargetIntersectionCount * DIVIDE(__DS0PrimaryCount, __DS0SecondaryCount)),
						1
					)),
					1
				)
			),
			IF(
				AND(__DS0PrimaryCount > 800, __DS0SecondaryCount > 60),
				60,
				IF(
					__DS0SecondaryCount > 60,
					CEILING(DIVIDE(__DS0TargetIntersectionCount, __DS0PrimaryCount), 1),
					__DS0SecondaryCount
				)
			)
		)

	VAR __DS0MinPrimaryCount = MIN(10, __DS0PrimaryCount)

	VAR __DS0MinSecondaryCount = MIN(10, __DS0SecondaryCount)

	VAR __DS0TargetPrimaryCount = 
		IF(
			__DS0InitTargetPrimaryCount < __DS0MinPrimaryCount,
			__DS0MinPrimaryCount,
			IF(
				__DS0InitTargetSecondaryCount < __DS0MinSecondaryCount,
				CEILING(DIVIDE(__DS0TargetIntersectionCount, __DS0MinSecondaryCount), 1),
				__DS0InitTargetPrimaryCount
			)
		)

	VAR __DS0TargetSecondaryCount = 
		IF(
			__DS0InitTargetPrimaryCount < __DS0MinPrimaryCount,
			CEILING(DIVIDE(__DS0TargetIntersectionCount, __DS0MinPrimaryCount), 1),
			IF(
				__DS0InitTargetSecondaryCount < __DS0MinSecondaryCount,
				__DS0MinSecondaryCount,
				__DS0InitTargetSecondaryCount
			)
		)

	VAR __DS0Primary = 
		TOPN(
			__DS0TargetPrimaryCount + 1,
			__DS0PrimaryWithSortColumns,
			[SortBy_DM0_0],
			0,
			'States'[State],
			1
		)

	VAR __DS0Secondary = 
		TOPN(__DS0TargetSecondaryCount + 1, __DS0SecondaryBase, 'States'[Census Region], 1)

	VAR __DS0BodyLimited = 
		NATURALLEFTOUTERJOIN(
			__DS0Primary,
			SUBSTITUTEWITHINDEX(
				__DS0CoreOnlyOutputTotals,
				"ColumnIndex",
				__DS0Secondary,
				'States'[Census Region],
				ASC
			)
		)

EVALUATE
	ROW(
		"DS0IntersectionCount", __DS0IntersectionCount,
		"DS0PrimaryCount", __DS0PrimaryCount,
		"DS0TargetPrimaryCount", __DS0TargetPrimaryCount,
		"DS0SecondaryCount", __DS0SecondaryCount,
		"DS0TargetSecondaryCount", __DS0TargetSecondaryCount
	)

EVALUATE
	__DS0Secondary

ORDER BY
	'States'[Census Region]

EVALUATE
	__DS0BodyLimited

ORDER BY
	[SortBy_DM0_0] DESC, 'States'[State], [ColumnIndex]
